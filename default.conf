# Formato de vários servidores em um único ip, varios servidores usarão um único ip
# a mesma porta 443 mas certificados diferentes


server {
    listen                  80;

    location / {
        return              301 https://$host$request_uri;
    }
}

server {
    listen                  443 ssl;

    server_name             api.local.com;

    ssl_certificate         /etc/nginx/ssl/server.crt;
    ssl_certificate_key     /etc/nginx/ssl/server.key;
    ssl_protocols           TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers             HIGH:!aNULL:!MD5;

    ssl_client_certificate  /etc/nginx/client_certs/ca.crt;
    ssl_verify_client       optional;
    ssl_verify_depth        2;

    location / {
        if ($ssl_client_verify != SUCCESS) { return 403; }

        proxy_set_header     SSL_Client_Issuer $ssl_client_i_dn;
        proxy_set_header     SSL_Client $ssl_client_s_dn;
        proxy_set_header     SSL_Client_Verify $ssl_client_verify;
        
        #proxy_pass           https://nodes;
         proxy_pass           http://node1:8080;
    }
}

server {
    listen                  443 ssl;

    server_name             api2.local.com;

    ssl_certificate         /etc/nginx/ssl/server2.crt;
    ssl_certificate_key     /etc/nginx/ssl/server2.key;
    ssl_protocols           TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers             HIGH:!aNULL:!MD5;

    # ssl_client_certificate  /etc/nginx/client_certs/ca.crt;
    # ssl_verify_client       optional;
    # ssl_verify_depth        2;

    location / {
        # if ($ssl_client_verify != SUCCESS) { return 403; }

        # proxy_set_header     SSL_Client_Issuer $ssl_client_i_dn;
        # proxy_set_header     SSL_Client $ssl_client_s_dn;
        # proxy_set_header     SSL_Client_Verify $ssl_client_verify;
        
        #proxy_pass           https://nodes;
         proxy_pass           http://node2:8081;
    }
}